// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Not(in=zx, out=nzx);
        And16(a=x, b[0..15]=false, out=xz);
        Not16(in=x, out=xn);
        Not16(in=xz, out=xzn);
        Mux4Way16(a=x, b=xz, c=xn, d=xzn, sel[0]=zx, sel[1]=nx, out=xo);

        Not(in=zy, out=nzy);
        And16(a=y, b[0..15]=false, out=yz);
        Not16(in=y, out=yn);
        Not16(in=yz, out=yzn);
        Mux4Way16(a=y, b=yz, c=yn, d=yzn, sel[0]=zy, sel[1]=ny, out=yo);

        Add16(a=xo, b=yo, out=addxy);
        Not16(in=addxy, out=addxyn);

        And16(a=xo, b=yo, out=andxy);
        Not16(in=andxy, out=andxyn);

        Mux4Way16(a=andxy, b=addxy, c=andxyn, d=addxyn, 
            sel[0]=f, sel[1]=no,
            out=o, 
            out[0..7]=ol,
            out[8..15]=oh,
            out[15]=out15);
        And16(a=o, b[0..15]=true, out=out);
        And(a=out15, b=true, out=ng);

        Or8Way(in=ol, out=zrlow);
        Or8Way(in=oh, out=zrhigh);
        Or(a=zrlow, b=zrhigh, out=nzr);
        Not(in=nzr, out=zr);
}